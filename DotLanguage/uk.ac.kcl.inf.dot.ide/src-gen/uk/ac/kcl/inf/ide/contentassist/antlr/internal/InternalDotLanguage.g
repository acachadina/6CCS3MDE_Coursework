/*
 * generated by Xtext 2.25.0
 */
grammar InternalDotLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package uk.ac.kcl.inf.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import uk.ac.kcl.inf.services.DotLanguageGrammarAccess;

}
@parser::members {
	private DotLanguageGrammarAccess grammarAccess;

	public void setGrammarAccess(DotLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDotLanguage
entryRuleDotLanguage
:
{ before(grammarAccess.getDotLanguageRule()); }
	 ruleDotLanguage
{ after(grammarAccess.getDotLanguageRule()); } 
	 EOF 
;

// Rule DotLanguage
ruleDotLanguage 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDotLanguageAccess().getGraphsAssignment()); }
		(rule__DotLanguage__GraphsAssignment)*
		{ after(grammarAccess.getDotLanguageAccess().getGraphsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGraph
entryRuleGraph
:
{ before(grammarAccess.getGraphRule()); }
	 ruleGraph
{ after(grammarAccess.getGraphRule()); } 
	 EOF 
;

// Rule Graph
ruleGraph 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGraphAccess().getGroup()); }
		(rule__Graph__Group__0)
		{ after(grammarAccess.getGraphAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDigraph
entryRuleDigraph
:
{ before(grammarAccess.getDigraphRule()); }
	 ruleDigraph
{ after(grammarAccess.getDigraphRule()); } 
	 EOF 
;

// Rule Digraph
ruleDigraph 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDigraphAccess().getGroup()); }
		(rule__Digraph__Group__0)
		{ after(grammarAccess.getDigraphAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDirectedStatement
entryRuleDirectedStatement
:
{ before(grammarAccess.getDirectedStatementRule()); }
	 ruleDirectedStatement
{ after(grammarAccess.getDirectedStatementRule()); } 
	 EOF 
;

// Rule DirectedStatement
ruleDirectedStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDirectedStatementAccess().getGroup()); }
		(rule__DirectedStatement__Group__0)
		{ after(grammarAccess.getDirectedStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUndirectedStatement
entryRuleUndirectedStatement
:
{ before(grammarAccess.getUndirectedStatementRule()); }
	 ruleUndirectedStatement
{ after(grammarAccess.getUndirectedStatementRule()); } 
	 EOF 
;

// Rule UndirectedStatement
ruleUndirectedStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUndirectedStatementAccess().getGroup()); }
		(rule__UndirectedStatement__Group__0)
		{ after(grammarAccess.getUndirectedStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNodeDeclaration
entryRuleNodeDeclaration
:
{ before(grammarAccess.getNodeDeclarationRule()); }
	 ruleNodeDeclaration
{ after(grammarAccess.getNodeDeclarationRule()); } 
	 EOF 
;

// Rule NodeDeclaration
ruleNodeDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeDeclarationAccess().getGroup()); }
		(rule__NodeDeclaration__Group__0)
		{ after(grammarAccess.getNodeDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNodeId
entryRuleNodeId
:
{ before(grammarAccess.getNodeIdRule()); }
	 ruleNodeId
{ after(grammarAccess.getNodeIdRule()); } 
	 EOF 
;

// Rule NodeId
ruleNodeId 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeIdAccess().getNameAssignment()); }
		(rule__NodeId__NameAssignment)
		{ after(grammarAccess.getNodeIdAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttributeList
entryRuleAttributeList
:
{ before(grammarAccess.getAttributeListRule()); }
	 ruleAttributeList
{ after(grammarAccess.getAttributeListRule()); } 
	 EOF 
;

// Rule AttributeList
ruleAttributeList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeListAccess().getGroup()); }
		(rule__AttributeList__Group__0)
		{ after(grammarAccess.getAttributeListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttribute
entryRuleAttribute
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeAccess().getGroup()); }
		(rule__Attribute__Group__0)
		{ after(grammarAccess.getAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIDORINT
entryRuleIDORINT
:
{ before(grammarAccess.getIDORINTRule()); }
	 ruleIDORINT
{ after(grammarAccess.getIDORINTRule()); } 
	 EOF 
;

// Rule IDORINT
ruleIDORINT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIDORINTAccess().getAlternatives()); }
		(rule__IDORINT__Alternatives)
		{ after(grammarAccess.getIDORINTAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDirectedEdgeDeclaration
entryRuleDirectedEdgeDeclaration
:
{ before(grammarAccess.getDirectedEdgeDeclarationRule()); }
	 ruleDirectedEdgeDeclaration
{ after(grammarAccess.getDirectedEdgeDeclarationRule()); } 
	 EOF 
;

// Rule DirectedEdgeDeclaration
ruleDirectedEdgeDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDirectedEdgeDeclarationAccess().getGroup()); }
		(rule__DirectedEdgeDeclaration__Group__0)
		{ after(grammarAccess.getDirectedEdgeDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUndirectedEdgeDeclaration
entryRuleUndirectedEdgeDeclaration
:
{ before(grammarAccess.getUndirectedEdgeDeclarationRule()); }
	 ruleUndirectedEdgeDeclaration
{ after(grammarAccess.getUndirectedEdgeDeclarationRule()); } 
	 EOF 
;

// Rule UndirectedEdgeDeclaration
ruleUndirectedEdgeDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUndirectedEdgeDeclarationAccess().getGroup()); }
		(rule__UndirectedEdgeDeclaration__Group__0)
		{ after(grammarAccess.getUndirectedEdgeDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRightEdgeDeclaration
entryRuleRightEdgeDeclaration
:
{ before(grammarAccess.getRightEdgeDeclarationRule()); }
	 ruleRightEdgeDeclaration
{ after(grammarAccess.getRightEdgeDeclarationRule()); } 
	 EOF 
;

// Rule RightEdgeDeclaration
ruleRightEdgeDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRightEdgeDeclarationAccess().getAlternatives()); }
		(rule__RightEdgeDeclaration__Alternatives)
		{ after(grammarAccess.getRightEdgeDeclarationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNodeList
entryRuleNodeList
:
{ before(grammarAccess.getNodeListRule()); }
	 ruleNodeList
{ after(grammarAccess.getNodeListRule()); } 
	 EOF 
;

// Rule NodeList
ruleNodeList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeListAccess().getGroup()); }
		(rule__NodeList__Group__0)
		{ after(grammarAccess.getNodeListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDirectedEdge
entryRuleDirectedEdge
:
{ before(grammarAccess.getDirectedEdgeRule()); }
	 ruleDirectedEdge
{ after(grammarAccess.getDirectedEdgeRule()); } 
	 EOF 
;

// Rule DirectedEdge
ruleDirectedEdge 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDirectedEdgeAccess().getHyphenMinusGreaterThanSignKeyword()); }
		'->'
		{ after(grammarAccess.getDirectedEdgeAccess().getHyphenMinusGreaterThanSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUndirectedEdge
entryRuleUndirectedEdge
:
{ before(grammarAccess.getUndirectedEdgeRule()); }
	 ruleUndirectedEdge
{ after(grammarAccess.getUndirectedEdgeRule()); } 
	 EOF 
;

// Rule UndirectedEdge
ruleUndirectedEdge 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUndirectedEdgeAccess().getHyphenMinusHyphenMinusKeyword()); }
		'--'
		{ after(grammarAccess.getUndirectedEdgeAccess().getHyphenMinusHyphenMinusKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DotLanguage__GraphsAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDotLanguageAccess().getGraphsGraphParserRuleCall_0_0()); }
		ruleGraph
		{ after(grammarAccess.getDotLanguageAccess().getGraphsGraphParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDotLanguageAccess().getGraphsDigraphParserRuleCall_0_1()); }
		ruleDigraph
		{ after(grammarAccess.getDotLanguageAccess().getGraphsDigraphParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectedStatement__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectedStatementAccess().getNodeDeclarationParserRuleCall_0_0()); }
		ruleNodeDeclaration
		{ after(grammarAccess.getDirectedStatementAccess().getNodeDeclarationParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDirectedStatementAccess().getDirectedEdgeDeclarationParserRuleCall_0_1()); }
		ruleDirectedEdgeDeclaration
		{ after(grammarAccess.getDirectedStatementAccess().getDirectedEdgeDeclarationParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectedStatement__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectedStatementAccess().getCommaKeyword_1_0()); }
		','
		{ after(grammarAccess.getDirectedStatementAccess().getCommaKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getDirectedStatementAccess().getSemicolonKeyword_1_1()); }
		';'
		{ after(grammarAccess.getDirectedStatementAccess().getSemicolonKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UndirectedStatement__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUndirectedStatementAccess().getNodeDeclarationParserRuleCall_0_0()); }
		ruleNodeDeclaration
		{ after(grammarAccess.getUndirectedStatementAccess().getNodeDeclarationParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getUndirectedStatementAccess().getUndirectedEdgeDeclarationParserRuleCall_0_1()); }
		ruleUndirectedEdgeDeclaration
		{ after(grammarAccess.getUndirectedStatementAccess().getUndirectedEdgeDeclarationParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UndirectedStatement__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUndirectedStatementAccess().getCommaKeyword_1_0()); }
		','
		{ after(grammarAccess.getUndirectedStatementAccess().getCommaKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getUndirectedStatementAccess().getSemicolonKeyword_1_1()); }
		';'
		{ after(grammarAccess.getUndirectedStatementAccess().getSemicolonKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IDORINT__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIDORINTAccess().getIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getIDORINTAccess().getIDTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getIDORINTAccess().getINTTerminalRuleCall_1()); }
		RULE_INT
		{ after(grammarAccess.getIDORINTAccess().getINTTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RightEdgeDeclaration__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRightEdgeDeclarationAccess().getSecondNodeAssignment_0()); }
		(rule__RightEdgeDeclaration__SecondNodeAssignment_0)
		{ after(grammarAccess.getRightEdgeDeclarationAccess().getSecondNodeAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getRightEdgeDeclarationAccess().getNodeListAssignment_1()); }
		(rule__RightEdgeDeclaration__NodeListAssignment_1)
		{ after(grammarAccess.getRightEdgeDeclarationAccess().getNodeListAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__0__Impl
	rule__Graph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getGraphKeyword_0()); }
	'graph'
	{ after(grammarAccess.getGraphAccess().getGraphKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__1__Impl
	rule__Graph__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getNameAssignment_1()); }
	(rule__Graph__NameAssignment_1)
	{ after(grammarAccess.getGraphAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__2__Impl
	rule__Graph__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getGraphAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__3__Impl
	rule__Graph__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getStatementsAssignment_3()); }
	(rule__Graph__StatementsAssignment_3)*
	{ after(grammarAccess.getGraphAccess().getStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getGraphAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Digraph__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Digraph__Group__0__Impl
	rule__Digraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Digraph__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDigraphAccess().getDigraphKeyword_0()); }
	'digraph'
	{ after(grammarAccess.getDigraphAccess().getDigraphKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Digraph__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Digraph__Group__1__Impl
	rule__Digraph__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Digraph__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDigraphAccess().getNameAssignment_1()); }
	(rule__Digraph__NameAssignment_1)
	{ after(grammarAccess.getDigraphAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Digraph__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Digraph__Group__2__Impl
	rule__Digraph__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Digraph__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDigraphAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getDigraphAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Digraph__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Digraph__Group__3__Impl
	rule__Digraph__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Digraph__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDigraphAccess().getStatementsAssignment_3()); }
	(rule__Digraph__StatementsAssignment_3)*
	{ after(grammarAccess.getDigraphAccess().getStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Digraph__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Digraph__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Digraph__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDigraphAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getDigraphAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DirectedStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DirectedStatement__Group__0__Impl
	rule__DirectedStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectedStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectedStatementAccess().getAlternatives_0()); }
	(rule__DirectedStatement__Alternatives_0)
	{ after(grammarAccess.getDirectedStatementAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectedStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DirectedStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectedStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectedStatementAccess().getAlternatives_1()); }
	(rule__DirectedStatement__Alternatives_1)?
	{ after(grammarAccess.getDirectedStatementAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UndirectedStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UndirectedStatement__Group__0__Impl
	rule__UndirectedStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UndirectedStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUndirectedStatementAccess().getAlternatives_0()); }
	(rule__UndirectedStatement__Alternatives_0)
	{ after(grammarAccess.getUndirectedStatementAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UndirectedStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UndirectedStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UndirectedStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUndirectedStatementAccess().getAlternatives_1()); }
	(rule__UndirectedStatement__Alternatives_1)?
	{ after(grammarAccess.getUndirectedStatementAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NodeDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeDeclaration__Group__0__Impl
	rule__NodeDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeDeclarationAccess().getNodeNameAssignment_0()); }
	(rule__NodeDeclaration__NodeNameAssignment_0)
	{ after(grammarAccess.getNodeDeclarationAccess().getNodeNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeDeclarationAccess().getOptionalAttributesAssignment_1()); }
	(rule__NodeDeclaration__OptionalAttributesAssignment_1)?
	{ after(grammarAccess.getNodeDeclarationAccess().getOptionalAttributesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeList__Group__0__Impl
	rule__AttributeList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeListAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getAttributeListAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeList__Group__1__Impl
	rule__AttributeList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getAttributeListAccess().getAttrAssignment_1()); }
		(rule__AttributeList__AttrAssignment_1)
		{ after(grammarAccess.getAttributeListAccess().getAttrAssignment_1()); }
	)
	(
		{ before(grammarAccess.getAttributeListAccess().getAttrAssignment_1()); }
		(rule__AttributeList__AttrAssignment_1)*
		{ after(grammarAccess.getAttributeListAccess().getAttrAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeListAccess().getRightSquareBracketKeyword_2()); }
	']'
	{ after(grammarAccess.getAttributeListAccess().getRightSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getAttributeNameAssignment_0()); }
	(rule__Attribute__AttributeNameAssignment_0)
	{ after(grammarAccess.getAttributeAccess().getAttributeNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__1__Impl
	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getAttributeAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__2__Impl
	rule__Attribute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getAttributeValueAssignment_2()); }
	(rule__Attribute__AttributeValueAssignment_2)
	{ after(grammarAccess.getAttributeAccess().getAttributeValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getCommaKeyword_3()); }
	(',')?
	{ after(grammarAccess.getAttributeAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DirectedEdgeDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DirectedEdgeDeclaration__Group__0__Impl
	rule__DirectedEdgeDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectedEdgeDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectedEdgeDeclarationAccess().getFirstNodeAssignment_0()); }
	(rule__DirectedEdgeDeclaration__FirstNodeAssignment_0)
	{ after(grammarAccess.getDirectedEdgeDeclarationAccess().getFirstNodeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectedEdgeDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DirectedEdgeDeclaration__Group__1__Impl
	rule__DirectedEdgeDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectedEdgeDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectedEdgeDeclarationAccess().getEdgeAssignment_1()); }
	(rule__DirectedEdgeDeclaration__EdgeAssignment_1)
	{ after(grammarAccess.getDirectedEdgeDeclarationAccess().getEdgeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectedEdgeDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DirectedEdgeDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectedEdgeDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectedEdgeDeclarationAccess().getSecondNodeAssignment_2()); }
	(rule__DirectedEdgeDeclaration__SecondNodeAssignment_2)
	{ after(grammarAccess.getDirectedEdgeDeclarationAccess().getSecondNodeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UndirectedEdgeDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UndirectedEdgeDeclaration__Group__0__Impl
	rule__UndirectedEdgeDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UndirectedEdgeDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUndirectedEdgeDeclarationAccess().getFirstNodeAssignment_0()); }
	(rule__UndirectedEdgeDeclaration__FirstNodeAssignment_0)
	{ after(grammarAccess.getUndirectedEdgeDeclarationAccess().getFirstNodeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UndirectedEdgeDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UndirectedEdgeDeclaration__Group__1__Impl
	rule__UndirectedEdgeDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UndirectedEdgeDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUndirectedEdgeDeclarationAccess().getEdgeAssignment_1()); }
	(rule__UndirectedEdgeDeclaration__EdgeAssignment_1)
	{ after(grammarAccess.getUndirectedEdgeDeclarationAccess().getEdgeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UndirectedEdgeDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UndirectedEdgeDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UndirectedEdgeDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUndirectedEdgeDeclarationAccess().getSecondNodeAssignment_2()); }
	(rule__UndirectedEdgeDeclaration__SecondNodeAssignment_2)
	{ after(grammarAccess.getUndirectedEdgeDeclarationAccess().getSecondNodeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NodeList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeList__Group__0__Impl
	rule__NodeList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeListAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getNodeListAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeList__Group__1__Impl
	rule__NodeList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getNodeListAccess().getNodesAssignment_1()); }
		(rule__NodeList__NodesAssignment_1)
		{ after(grammarAccess.getNodeListAccess().getNodesAssignment_1()); }
	)
	(
		{ before(grammarAccess.getNodeListAccess().getNodesAssignment_1()); }
		(rule__NodeList__NodesAssignment_1)*
		{ after(grammarAccess.getNodeListAccess().getNodesAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeListAccess().getRightCurlyBracketKeyword_2()); }
	'}'
	{ after(grammarAccess.getNodeListAccess().getRightCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DotLanguage__GraphsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDotLanguageAccess().getGraphsAlternatives_0()); }
		(rule__DotLanguage__GraphsAlternatives_0)
		{ after(grammarAccess.getDotLanguageAccess().getGraphsAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getGraphAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphAccess().getStatementsUndirectedStatementParserRuleCall_3_0()); }
		ruleUndirectedStatement
		{ after(grammarAccess.getGraphAccess().getStatementsUndirectedStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Digraph__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDigraphAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDigraphAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Digraph__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDigraphAccess().getStatementsDirectedStatementParserRuleCall_3_0()); }
		ruleDirectedStatement
		{ after(grammarAccess.getDigraphAccess().getStatementsDirectedStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDeclaration__NodeNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeDeclarationAccess().getNodeNameNodeIdParserRuleCall_0_0()); }
		ruleNodeId
		{ after(grammarAccess.getNodeDeclarationAccess().getNodeNameNodeIdParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDeclaration__OptionalAttributesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeDeclarationAccess().getOptionalAttributesAttributeListParserRuleCall_1_0()); }
		ruleAttributeList
		{ after(grammarAccess.getNodeDeclarationAccess().getOptionalAttributesAttributeListParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeId__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeIdAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getNodeIdAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeList__AttrAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeListAccess().getAttrAttributeParserRuleCall_1_0()); }
		ruleAttribute
		{ after(grammarAccess.getAttributeListAccess().getAttrAttributeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__AttributeNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getAttributeNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAttributeAccess().getAttributeNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__AttributeValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getAttributeValueIDORINTParserRuleCall_2_0()); }
		ruleIDORINT
		{ after(grammarAccess.getAttributeAccess().getAttributeValueIDORINTParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectedEdgeDeclaration__FirstNodeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectedEdgeDeclarationAccess().getFirstNodeNodeIdCrossReference_0_0()); }
		(
			{ before(grammarAccess.getDirectedEdgeDeclarationAccess().getFirstNodeNodeIdIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getDirectedEdgeDeclarationAccess().getFirstNodeNodeIdIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getDirectedEdgeDeclarationAccess().getFirstNodeNodeIdCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectedEdgeDeclaration__EdgeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectedEdgeDeclarationAccess().getEdgeDirectedEdgeParserRuleCall_1_0()); }
		ruleDirectedEdge
		{ after(grammarAccess.getDirectedEdgeDeclarationAccess().getEdgeDirectedEdgeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectedEdgeDeclaration__SecondNodeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectedEdgeDeclarationAccess().getSecondNodeRightEdgeDeclarationParserRuleCall_2_0()); }
		ruleRightEdgeDeclaration
		{ after(grammarAccess.getDirectedEdgeDeclarationAccess().getSecondNodeRightEdgeDeclarationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UndirectedEdgeDeclaration__FirstNodeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUndirectedEdgeDeclarationAccess().getFirstNodeNodeIdCrossReference_0_0()); }
		(
			{ before(grammarAccess.getUndirectedEdgeDeclarationAccess().getFirstNodeNodeIdIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getUndirectedEdgeDeclarationAccess().getFirstNodeNodeIdIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getUndirectedEdgeDeclarationAccess().getFirstNodeNodeIdCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UndirectedEdgeDeclaration__EdgeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUndirectedEdgeDeclarationAccess().getEdgeUndirectedEdgeParserRuleCall_1_0()); }
		ruleUndirectedEdge
		{ after(grammarAccess.getUndirectedEdgeDeclarationAccess().getEdgeUndirectedEdgeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UndirectedEdgeDeclaration__SecondNodeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUndirectedEdgeDeclarationAccess().getSecondNodeRightEdgeDeclarationParserRuleCall_2_0()); }
		ruleRightEdgeDeclaration
		{ after(grammarAccess.getUndirectedEdgeDeclarationAccess().getSecondNodeRightEdgeDeclarationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RightEdgeDeclaration__SecondNodeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRightEdgeDeclarationAccess().getSecondNodeNodeIdCrossReference_0_0()); }
		(
			{ before(grammarAccess.getRightEdgeDeclarationAccess().getSecondNodeNodeIdIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getRightEdgeDeclarationAccess().getSecondNodeNodeIdIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getRightEdgeDeclarationAccess().getSecondNodeNodeIdCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RightEdgeDeclaration__NodeListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRightEdgeDeclarationAccess().getNodeListNodeListParserRuleCall_1_0()); }
		ruleNodeList
		{ after(grammarAccess.getRightEdgeDeclarationAccess().getNodeListNodeListParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeList__NodesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeListAccess().getNodesNodeIdCrossReference_1_0()); }
		(
			{ before(grammarAccess.getNodeListAccess().getNodesNodeIdIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getNodeListAccess().getNodesNodeIdIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getNodeListAccess().getNodesNodeIdCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
