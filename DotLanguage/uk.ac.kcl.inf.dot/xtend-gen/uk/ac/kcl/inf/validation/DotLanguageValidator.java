/**
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.inf.validation;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Conversions;
import uk.ac.kcl.inf.dotLanguage.Digraph;
import uk.ac.kcl.inf.dotLanguage.DirectedEdgeDeclaration;
import uk.ac.kcl.inf.dotLanguage.DirectedStatement;
import uk.ac.kcl.inf.dotLanguage.DotLanguagePackage;
import uk.ac.kcl.inf.dotLanguage.Graph;
import uk.ac.kcl.inf.dotLanguage.NodeDeclaration;
import uk.ac.kcl.inf.dotLanguage.NodeId;
import uk.ac.kcl.inf.dotLanguage.UndirectedEdgeDeclaration;
import uk.ac.kcl.inf.dotLanguage.UndirectedStatement;
import uk.ac.kcl.inf.dotLanguage.impl.DirectedEdgeDeclarationImpl;

/**
 * This class contains custom validation rules.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class DotLanguageValidator extends AbstractDotLanguageValidator {
  /**
   * Check whether there is a declared unused node in directed and undirected graphs.
   */
  public static final String DECLARED_UNUSED_GRAPH_NODE = "uk.ac.kcl.inf.dotLanguage.DECLARED_UNUSED_GRAPH_NODE";
  
  public static final String DECLARED_UNUSED_DIGRAPH_NODE = "uk.ac.kcl.inf.dotLanguage.DECLARED_UNUSED_DIGRAPH_NODE";
  
  @Check
  public void declaredUnusedGraphNode(final NodeDeclaration nodeDeclaration) {
    final EObject graph = nodeDeclaration.eContainer();
    final NodeId nodeId = nodeDeclaration.getNodeName();
    String _name = graph.eClass().getName();
    boolean _equals = Objects.equal(_name, "Graph");
    if (_equals) {
      boolean _usedGraphNode = this.usedGraphNode(((Graph) graph), nodeId);
      boolean _not = (!_usedGraphNode);
      if (_not) {
        this.warning("This node is declared but not used", nodeDeclaration, 
          DotLanguagePackage.Literals.NODE_DECLARATION__NODE_NAME, 
          DotLanguageValidator.DECLARED_UNUSED_GRAPH_NODE);
      }
    } else {
      boolean _usedDigraphNode = this.usedDigraphNode(((Digraph) graph), nodeId);
      boolean _not_1 = (!_usedDigraphNode);
      if (_not_1) {
        this.warning("This node is declared but not used", nodeDeclaration, 
          DotLanguagePackage.Literals.NODE_DECLARATION__NODE_NAME, 
          DotLanguageValidator.DECLARED_UNUSED_DIGRAPH_NODE);
      }
    }
  }
  
  /**
   * Check whether there are several declarations of the same edge.
   */
  @Check
  public void multipleEdgeDeclarations(final DirectedEdgeDeclaration edgeDeclaration) {
    throw new Error("Unresolved compilation problems:"
      + "\nno viable alternative at input \'}\'");
  }
  
  /**
   * HELPER FUNCTIONS
   */
  public boolean usedGraphNode(final Graph graph, final NodeId node) {
    boolean used = false;
    final EList<UndirectedStatement> graphStatements = graph.getStatements();
    for (int i = 0; (i < ((Object[])Conversions.unwrapArray(graph.getStatements(), Object.class)).length); i++) {
      String _name = graphStatements.get(i).eClass().getName();
      boolean _equals = Objects.equal(_name, "UndirectedEdgeDeclaration");
      if (_equals) {
        final UndirectedStatement edgeDeclaration = graphStatements.get(i);
        final NodeId firstNode = ((UndirectedEdgeDeclaration) edgeDeclaration).getFirstNode();
        final NodeId secondNode = ((UndirectedEdgeDeclaration) edgeDeclaration).getSecondNode();
        if ((Objects.equal(node, firstNode) || Objects.equal(node, secondNode))) {
          used = true;
        }
      }
    }
    return used;
  }
  
  public boolean usedDigraphNode(final Digraph graph, final NodeId node) {
    boolean used = false;
    final EList<DirectedStatement> graphStatements = graph.getStatements();
    for (int i = 0; (i < ((Object[])Conversions.unwrapArray(graph.getStatements(), Object.class)).length); i++) {
      String _name = graphStatements.get(i).eClass().getName();
      boolean _equals = Objects.equal(_name, "DirectedEdgeDeclaration");
      if (_equals) {
        final DirectedStatement edgeDeclaration = graphStatements.get(i);
        final NodeId firstNode = ((DirectedEdgeDeclarationImpl) edgeDeclaration).getFirstNode();
        final NodeId secondNode = ((DirectedEdgeDeclarationImpl) edgeDeclaration).getSecondNode();
        if ((Objects.equal(node, firstNode) || Objects.equal(node, secondNode))) {
          used = true;
        }
      }
    }
    return used;
  }
}
