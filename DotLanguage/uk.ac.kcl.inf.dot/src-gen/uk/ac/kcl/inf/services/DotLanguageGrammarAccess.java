/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DotLanguageGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class DotLanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.DotLanguage.DotLanguage");
		private final Assignment cGraphsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cGraphsAlternatives_0 = (Alternatives)cGraphsAssignment.eContents().get(0);
		private final RuleCall cGraphsGraphParserRuleCall_0_0 = (RuleCall)cGraphsAlternatives_0.eContents().get(0);
		private final RuleCall cGraphsDigraphParserRuleCall_0_1 = (RuleCall)cGraphsAlternatives_0.eContents().get(1);
		
		///**
		// * TODO: subgraphs???
		// */
		//DotLanguage:
		//    graphs += (Graph | Digraph)*;
		@Override public ParserRule getRule() { return rule; }
		
		//graphs += (Graph | Digraph)*
		public Assignment getGraphsAssignment() { return cGraphsAssignment; }
		
		//(Graph | Digraph)
		public Alternatives getGraphsAlternatives_0() { return cGraphsAlternatives_0; }
		
		//Graph
		public RuleCall getGraphsGraphParserRuleCall_0_0() { return cGraphsGraphParserRuleCall_0_0; }
		
		//Digraph
		public RuleCall getGraphsDigraphParserRuleCall_0_1() { return cGraphsDigraphParserRuleCall_0_1; }
	}
	public class GraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.DotLanguage.Graph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGraphKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsUndirectedStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Graph:
		//    "graph" name=ID "{" statements += UndirectedStatement* "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"graph" name=ID "{" statements += UndirectedStatement* "}"
		public Group getGroup() { return cGroup; }
		
		//"graph"
		public Keyword getGraphKeyword_0() { return cGraphKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//statements += UndirectedStatement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//UndirectedStatement
		public RuleCall getStatementsUndirectedStatementParserRuleCall_3_0() { return cStatementsUndirectedStatementParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DigraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.DotLanguage.Digraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDigraphKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsDirectedStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Digraph:
		//    "digraph" name=ID "{" statements += DirectedStatement* "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"digraph" name=ID "{" statements += DirectedStatement* "}"
		public Group getGroup() { return cGroup; }
		
		//"digraph"
		public Keyword getDigraphKeyword_0() { return cDigraphKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//statements += DirectedStatement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//DirectedStatement
		public RuleCall getStatementsDirectedStatementParserRuleCall_3_0() { return cStatementsDirectedStatementParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DirectedStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.DotLanguage.DirectedStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cNodeDeclarationParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cDirectedEdgeDeclarationParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cDirectedSubgraphDeclarationParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//DirectedStatement:
		//    (
		//        NodeDeclaration |
		//        DirectedEdgeDeclaration |
		//        DirectedSubgraphDeclaration
		//    )
		//    ("," | ";")?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    NodeDeclaration |
		//    DirectedEdgeDeclaration |
		//    DirectedSubgraphDeclaration
		//)
		//("," | ";")?
		public Group getGroup() { return cGroup; }
		
		//(
		//    NodeDeclaration |
		//    DirectedEdgeDeclaration |
		//    DirectedSubgraphDeclaration
		//)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//NodeDeclaration
		public RuleCall getNodeDeclarationParserRuleCall_0_0() { return cNodeDeclarationParserRuleCall_0_0; }
		
		//DirectedEdgeDeclaration
		public RuleCall getDirectedEdgeDeclarationParserRuleCall_0_1() { return cDirectedEdgeDeclarationParserRuleCall_0_1; }
		
		//DirectedSubgraphDeclaration
		public RuleCall getDirectedSubgraphDeclarationParserRuleCall_0_2() { return cDirectedSubgraphDeclarationParserRuleCall_0_2; }
		
		//("," | ";")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class UndirectedStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.DotLanguage.UndirectedStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cNodeDeclarationParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cUndirectedEdgeDeclarationParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cUndirectedSubgraphDeclarationParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//UndirectedStatement:
		//    (
		//        NodeDeclaration |
		//        UndirectedEdgeDeclaration |
		//        UndirectedSubgraphDeclaration
		//    )
		//    ("," | ";")?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    NodeDeclaration |
		//    UndirectedEdgeDeclaration |
		//    UndirectedSubgraphDeclaration
		//)
		//("," | ";")?
		public Group getGroup() { return cGroup; }
		
		//(
		//    NodeDeclaration |
		//    UndirectedEdgeDeclaration |
		//    UndirectedSubgraphDeclaration
		//)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//NodeDeclaration
		public RuleCall getNodeDeclarationParserRuleCall_0_0() { return cNodeDeclarationParserRuleCall_0_0; }
		
		//UndirectedEdgeDeclaration
		public RuleCall getUndirectedEdgeDeclarationParserRuleCall_0_1() { return cUndirectedEdgeDeclarationParserRuleCall_0_1; }
		
		//UndirectedSubgraphDeclaration
		public RuleCall getUndirectedSubgraphDeclarationParserRuleCall_0_2() { return cUndirectedSubgraphDeclarationParserRuleCall_0_2; }
		
		//("," | ";")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class DirectedSubgraphDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.DotLanguage.DirectedSubgraphDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubgraphKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsDirectedStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DirectedSubgraphDeclaration:
		//    "subgraph" name=ID "{" statements += DirectedStatement* "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"subgraph" name=ID "{" statements += DirectedStatement* "}"
		public Group getGroup() { return cGroup; }
		
		//"subgraph"
		public Keyword getSubgraphKeyword_0() { return cSubgraphKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//statements += DirectedStatement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//DirectedStatement
		public RuleCall getStatementsDirectedStatementParserRuleCall_3_0() { return cStatementsDirectedStatementParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class UndirectedSubgraphDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.DotLanguage.UndirectedSubgraphDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubgraphKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsUndirectedStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UndirectedSubgraphDeclaration:
		//    "subgraph" name=ID "{" statements += UndirectedStatement* "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"subgraph" name=ID "{" statements += UndirectedStatement* "}"
		public Group getGroup() { return cGroup; }
		
		//"subgraph"
		public Keyword getSubgraphKeyword_0() { return cSubgraphKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//statements += UndirectedStatement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//UndirectedStatement
		public RuleCall getStatementsUndirectedStatementParserRuleCall_3_0() { return cStatementsUndirectedStatementParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class NodeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.DotLanguage.NodeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNodeNameNodeIdParserRuleCall_0_0 = (RuleCall)cNodeNameAssignment_0.eContents().get(0);
		private final Assignment cOptionalAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionalAttributesAttributeListParserRuleCall_1_0 = (RuleCall)cOptionalAttributesAssignment_1.eContents().get(0);
		
		//NodeDeclaration:
		//    nodeName = NodeId (optionalAttributes = AttributeList)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//nodeName = NodeId (optionalAttributes = AttributeList)?
		public Group getGroup() { return cGroup; }
		
		//nodeName = NodeId
		public Assignment getNodeNameAssignment_0() { return cNodeNameAssignment_0; }
		
		//NodeId
		public RuleCall getNodeNameNodeIdParserRuleCall_0_0() { return cNodeNameNodeIdParserRuleCall_0_0; }
		
		//(optionalAttributes = AttributeList)?
		public Assignment getOptionalAttributesAssignment_1() { return cOptionalAttributesAssignment_1; }
		
		//AttributeList
		public RuleCall getOptionalAttributesAttributeListParserRuleCall_1_0() { return cOptionalAttributesAttributeListParserRuleCall_1_0; }
	}
	public class NodeIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.DotLanguage.NodeId");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//NodeId:
		//    name = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class AttributeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.DotLanguage.AttributeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttrAttributeParserRuleCall_1_0 = (RuleCall)cAttrAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// the only supported attributes for now
		//// will be 'color' and 'label'
		//// color defaults to black and the label to the node's ID
		//AttributeList:
		//    "[" attr += Attribute* "]"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" attr += Attribute* "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//attr += Attribute*
		public Assignment getAttrAssignment_1() { return cAttrAssignment_1; }
		
		//Attribute
		public RuleCall getAttrAttributeParserRuleCall_1_0() { return cAttrAttributeParserRuleCall_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.DotLanguage.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributeNameIDTerminalRuleCall_0_0 = (RuleCall)cAttributeNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeValueIDTerminalRuleCall_2_0 = (RuleCall)cAttributeValueAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Attribute:
		//    attributeName = ID "=" attributeValue = ID (',')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//attributeName = ID "=" attributeValue = ID (',')?
		public Group getGroup() { return cGroup; }
		
		//attributeName = ID
		public Assignment getAttributeNameAssignment_0() { return cAttributeNameAssignment_0; }
		
		//ID
		public RuleCall getAttributeNameIDTerminalRuleCall_0_0() { return cAttributeNameIDTerminalRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//attributeValue = ID
		public Assignment getAttributeValueAssignment_2() { return cAttributeValueAssignment_2; }
		
		//ID
		public RuleCall getAttributeValueIDTerminalRuleCall_2_0() { return cAttributeValueIDTerminalRuleCall_2_0; }
		
		//(',')?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
	}
	public class DirectedEdgeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.DotLanguage.DirectedEdgeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFirstNodeNodeIdCrossReference_0_0 = (CrossReference)cFirstNodeAssignment_0.eContents().get(0);
		private final RuleCall cFirstNodeNodeIdIDTerminalRuleCall_0_0_1 = (RuleCall)cFirstNodeNodeIdCrossReference_0_0.eContents().get(1);
		private final Assignment cEdgeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEdgeDirectedEdgeParserRuleCall_1_0 = (RuleCall)cEdgeAssignment_1.eContents().get(0);
		private final Assignment cSecondNodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSecondNodeNodeIdCrossReference_2_0 = (CrossReference)cSecondNodeAssignment_2.eContents().get(0);
		private final RuleCall cSecondNodeNodeIdIDTerminalRuleCall_2_0_1 = (RuleCall)cSecondNodeNodeIdCrossReference_2_0.eContents().get(1);
		
		//// a node can be a reference to a declared node for now
		//DirectedEdgeDeclaration:
		//    firstNode = [NodeId] edge = DirectedEdge secondNode = [NodeId]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//firstNode = [NodeId] edge = DirectedEdge secondNode = [NodeId]
		public Group getGroup() { return cGroup; }
		
		//firstNode = [NodeId]
		public Assignment getFirstNodeAssignment_0() { return cFirstNodeAssignment_0; }
		
		//[NodeId]
		public CrossReference getFirstNodeNodeIdCrossReference_0_0() { return cFirstNodeNodeIdCrossReference_0_0; }
		
		//ID
		public RuleCall getFirstNodeNodeIdIDTerminalRuleCall_0_0_1() { return cFirstNodeNodeIdIDTerminalRuleCall_0_0_1; }
		
		//edge = DirectedEdge
		public Assignment getEdgeAssignment_1() { return cEdgeAssignment_1; }
		
		//DirectedEdge
		public RuleCall getEdgeDirectedEdgeParserRuleCall_1_0() { return cEdgeDirectedEdgeParserRuleCall_1_0; }
		
		//secondNode = [NodeId]
		public Assignment getSecondNodeAssignment_2() { return cSecondNodeAssignment_2; }
		
		//[NodeId]
		public CrossReference getSecondNodeNodeIdCrossReference_2_0() { return cSecondNodeNodeIdCrossReference_2_0; }
		
		//ID
		public RuleCall getSecondNodeNodeIdIDTerminalRuleCall_2_0_1() { return cSecondNodeNodeIdIDTerminalRuleCall_2_0_1; }
	}
	public class UndirectedEdgeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.DotLanguage.UndirectedEdgeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFirstNodeNodeIdCrossReference_0_0 = (CrossReference)cFirstNodeAssignment_0.eContents().get(0);
		private final RuleCall cFirstNodeNodeIdIDTerminalRuleCall_0_0_1 = (RuleCall)cFirstNodeNodeIdCrossReference_0_0.eContents().get(1);
		private final Assignment cEdgeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEdgeUndirectedEdgeParserRuleCall_1_0 = (RuleCall)cEdgeAssignment_1.eContents().get(0);
		private final Assignment cSecondNodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSecondNodeNodeIdCrossReference_2_0 = (CrossReference)cSecondNodeAssignment_2.eContents().get(0);
		private final RuleCall cSecondNodeNodeIdIDTerminalRuleCall_2_0_1 = (RuleCall)cSecondNodeNodeIdCrossReference_2_0.eContents().get(1);
		
		//UndirectedEdgeDeclaration:
		//    firstNode = [NodeId] edge = UndirectedEdge secondNode = [NodeId]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//firstNode = [NodeId] edge = UndirectedEdge secondNode = [NodeId]
		public Group getGroup() { return cGroup; }
		
		//firstNode = [NodeId]
		public Assignment getFirstNodeAssignment_0() { return cFirstNodeAssignment_0; }
		
		//[NodeId]
		public CrossReference getFirstNodeNodeIdCrossReference_0_0() { return cFirstNodeNodeIdCrossReference_0_0; }
		
		//ID
		public RuleCall getFirstNodeNodeIdIDTerminalRuleCall_0_0_1() { return cFirstNodeNodeIdIDTerminalRuleCall_0_0_1; }
		
		//edge = UndirectedEdge
		public Assignment getEdgeAssignment_1() { return cEdgeAssignment_1; }
		
		//UndirectedEdge
		public RuleCall getEdgeUndirectedEdgeParserRuleCall_1_0() { return cEdgeUndirectedEdgeParserRuleCall_1_0; }
		
		//secondNode = [NodeId]
		public Assignment getSecondNodeAssignment_2() { return cSecondNodeAssignment_2; }
		
		//[NodeId]
		public CrossReference getSecondNodeNodeIdCrossReference_2_0() { return cSecondNodeNodeIdCrossReference_2_0; }
		
		//ID
		public RuleCall getSecondNodeNodeIdIDTerminalRuleCall_2_0_1() { return cSecondNodeNodeIdIDTerminalRuleCall_2_0_1; }
	}
	public class DirectedEdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.DotLanguage.DirectedEdge");
		private final Keyword cHyphenMinusGreaterThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//DirectedEdge:
		//    "->"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword() { return cHyphenMinusGreaterThanSignKeyword; }
	}
	public class UndirectedEdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.DotLanguage.UndirectedEdge");
		private final Keyword cHyphenMinusHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//UndirectedEdge:
		//    "--"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword() { return cHyphenMinusHyphenMinusKeyword; }
	}
	
	public class ColorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.DotLanguage.Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRedRedKeyword_0_0 = (Keyword)cRedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBlueEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBlueBlueKeyword_1_0 = (Keyword)cBlueEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGreenEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGreenGreenKeyword_2_0 = (Keyword)cGreenEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBlackEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBlackBlackKeyword_3_0 = (Keyword)cBlackEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Color:
		//    red | blue | green | black
		//;
		public EnumRule getRule() { return rule; }
		
		//red | blue | green | black
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//red
		public EnumLiteralDeclaration getRedEnumLiteralDeclaration_0() { return cRedEnumLiteralDeclaration_0; }
		
		public Keyword getRedRedKeyword_0_0() { return cRedRedKeyword_0_0; }
		
		//blue
		public EnumLiteralDeclaration getBlueEnumLiteralDeclaration_1() { return cBlueEnumLiteralDeclaration_1; }
		
		public Keyword getBlueBlueKeyword_1_0() { return cBlueBlueKeyword_1_0; }
		
		//green
		public EnumLiteralDeclaration getGreenEnumLiteralDeclaration_2() { return cGreenEnumLiteralDeclaration_2; }
		
		public Keyword getGreenGreenKeyword_2_0() { return cGreenGreenKeyword_2_0; }
		
		//black
		public EnumLiteralDeclaration getBlackEnumLiteralDeclaration_3() { return cBlackEnumLiteralDeclaration_3; }
		
		public Keyword getBlackBlackKeyword_3_0() { return cBlackBlackKeyword_3_0; }
	}
	
	private final DotLanguageElements pDotLanguage;
	private final GraphElements pGraph;
	private final DigraphElements pDigraph;
	private final DirectedStatementElements pDirectedStatement;
	private final UndirectedStatementElements pUndirectedStatement;
	private final DirectedSubgraphDeclarationElements pDirectedSubgraphDeclaration;
	private final UndirectedSubgraphDeclarationElements pUndirectedSubgraphDeclaration;
	private final NodeDeclarationElements pNodeDeclaration;
	private final NodeIdElements pNodeId;
	private final AttributeListElements pAttributeList;
	private final AttributeElements pAttribute;
	private final ColorElements eColor;
	private final DirectedEdgeDeclarationElements pDirectedEdgeDeclaration;
	private final UndirectedEdgeDeclarationElements pUndirectedEdgeDeclaration;
	private final DirectedEdgeElements pDirectedEdge;
	private final UndirectedEdgeElements pUndirectedEdge;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DotLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDotLanguage = new DotLanguageElements();
		this.pGraph = new GraphElements();
		this.pDigraph = new DigraphElements();
		this.pDirectedStatement = new DirectedStatementElements();
		this.pUndirectedStatement = new UndirectedStatementElements();
		this.pDirectedSubgraphDeclaration = new DirectedSubgraphDeclarationElements();
		this.pUndirectedSubgraphDeclaration = new UndirectedSubgraphDeclarationElements();
		this.pNodeDeclaration = new NodeDeclarationElements();
		this.pNodeId = new NodeIdElements();
		this.pAttributeList = new AttributeListElements();
		this.pAttribute = new AttributeElements();
		this.eColor = new ColorElements();
		this.pDirectedEdgeDeclaration = new DirectedEdgeDeclarationElements();
		this.pUndirectedEdgeDeclaration = new UndirectedEdgeDeclarationElements();
		this.pDirectedEdge = new DirectedEdgeElements();
		this.pUndirectedEdge = new UndirectedEdgeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.DotLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///**
	// * TODO: subgraphs???
	// */
	//DotLanguage:
	//    graphs += (Graph | Digraph)*;
	public DotLanguageElements getDotLanguageAccess() {
		return pDotLanguage;
	}
	
	public ParserRule getDotLanguageRule() {
		return getDotLanguageAccess().getRule();
	}
	
	//Graph:
	//    "graph" name=ID "{" statements += UndirectedStatement* "}"
	//;
	public GraphElements getGraphAccess() {
		return pGraph;
	}
	
	public ParserRule getGraphRule() {
		return getGraphAccess().getRule();
	}
	
	//Digraph:
	//    "digraph" name=ID "{" statements += DirectedStatement* "}"
	//;
	public DigraphElements getDigraphAccess() {
		return pDigraph;
	}
	
	public ParserRule getDigraphRule() {
		return getDigraphAccess().getRule();
	}
	
	//DirectedStatement:
	//    (
	//        NodeDeclaration |
	//        DirectedEdgeDeclaration |
	//        DirectedSubgraphDeclaration
	//    )
	//    ("," | ";")?
	//;
	public DirectedStatementElements getDirectedStatementAccess() {
		return pDirectedStatement;
	}
	
	public ParserRule getDirectedStatementRule() {
		return getDirectedStatementAccess().getRule();
	}
	
	//UndirectedStatement:
	//    (
	//        NodeDeclaration |
	//        UndirectedEdgeDeclaration |
	//        UndirectedSubgraphDeclaration
	//    )
	//    ("," | ";")?
	//;
	public UndirectedStatementElements getUndirectedStatementAccess() {
		return pUndirectedStatement;
	}
	
	public ParserRule getUndirectedStatementRule() {
		return getUndirectedStatementAccess().getRule();
	}
	
	//DirectedSubgraphDeclaration:
	//    "subgraph" name=ID "{" statements += DirectedStatement* "}"
	//;
	public DirectedSubgraphDeclarationElements getDirectedSubgraphDeclarationAccess() {
		return pDirectedSubgraphDeclaration;
	}
	
	public ParserRule getDirectedSubgraphDeclarationRule() {
		return getDirectedSubgraphDeclarationAccess().getRule();
	}
	
	//UndirectedSubgraphDeclaration:
	//    "subgraph" name=ID "{" statements += UndirectedStatement* "}"
	//;
	public UndirectedSubgraphDeclarationElements getUndirectedSubgraphDeclarationAccess() {
		return pUndirectedSubgraphDeclaration;
	}
	
	public ParserRule getUndirectedSubgraphDeclarationRule() {
		return getUndirectedSubgraphDeclarationAccess().getRule();
	}
	
	//NodeDeclaration:
	//    nodeName = NodeId (optionalAttributes = AttributeList)?
	//;
	public NodeDeclarationElements getNodeDeclarationAccess() {
		return pNodeDeclaration;
	}
	
	public ParserRule getNodeDeclarationRule() {
		return getNodeDeclarationAccess().getRule();
	}
	
	//NodeId:
	//    name = ID
	//;
	public NodeIdElements getNodeIdAccess() {
		return pNodeId;
	}
	
	public ParserRule getNodeIdRule() {
		return getNodeIdAccess().getRule();
	}
	
	//// the only supported attributes for now
	//// will be 'color' and 'label'
	//// color defaults to black and the label to the node's ID
	//AttributeList:
	//    "[" attr += Attribute* "]"
	//;
	public AttributeListElements getAttributeListAccess() {
		return pAttributeList;
	}
	
	public ParserRule getAttributeListRule() {
		return getAttributeListAccess().getRule();
	}
	
	//Attribute:
	//    attributeName = ID "=" attributeValue = ID (',')?
	//;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//enum Color:
	//    red | blue | green | black
	//;
	public ColorElements getColorAccess() {
		return eColor;
	}
	
	public EnumRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//// a node can be a reference to a declared node for now
	//DirectedEdgeDeclaration:
	//    firstNode = [NodeId] edge = DirectedEdge secondNode = [NodeId]
	//;
	public DirectedEdgeDeclarationElements getDirectedEdgeDeclarationAccess() {
		return pDirectedEdgeDeclaration;
	}
	
	public ParserRule getDirectedEdgeDeclarationRule() {
		return getDirectedEdgeDeclarationAccess().getRule();
	}
	
	//UndirectedEdgeDeclaration:
	//    firstNode = [NodeId] edge = UndirectedEdge secondNode = [NodeId]
	//;
	public UndirectedEdgeDeclarationElements getUndirectedEdgeDeclarationAccess() {
		return pUndirectedEdgeDeclaration;
	}
	
	public ParserRule getUndirectedEdgeDeclarationRule() {
		return getUndirectedEdgeDeclarationAccess().getRule();
	}
	
	//DirectedEdge:
	//    "->"
	//;
	public DirectedEdgeElements getDirectedEdgeAccess() {
		return pDirectedEdge;
	}
	
	public ParserRule getDirectedEdgeRule() {
		return getDirectedEdgeAccess().getRule();
	}
	
	//UndirectedEdge:
	//    "--"
	//;
	public UndirectedEdgeElements getUndirectedEdgeAccess() {
		return pUndirectedEdge;
	}
	
	public ParserRule getUndirectedEdgeRule() {
		return getUndirectedEdgeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
