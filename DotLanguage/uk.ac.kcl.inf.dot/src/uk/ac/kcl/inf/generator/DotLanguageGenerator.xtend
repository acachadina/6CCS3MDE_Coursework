/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.inf.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uk.ac.kcl.inf.dotLanguage.DotLanguage

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DotLanguageGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.contents.head as DotLanguage
		
		val className = resource.deriveClassName
		fsa.generateFile(className + ".java", model.doGenerateClass(className))
		
				
	}
		
	def deriveClassName(Resource resource) {
		val originalFilename = resource.URI.lastSegment
		
		// string to the first dot
		originalFilename.substring(0, originalFilename.indexOf('.')).toFirstUpper + "Dot"
		
	}
	
	
	def doGenerateClass(DotLanguage program, String className) '''
		
		import dot.library.*;
		
		public class «className» {
			public static void main (String args[]){
				DotFrame tf = new DotFrame();
				
				Dot dot = new Dot(tf){
					@Override
					
					public void run() {
						addNode("anna", "node1", null, false);
		                addNode("anna", "node2", null, false);
		                addNode("anna", "node3", null, false);
		                addNode("anna", "node4", null, false);
		                addNode("anna", "node5", null, false);
		
		
		                addEdge("anna", "node1", "node2");
		                addEdge("anna", "node2", "node3");
		                addEdge("anna", "node1", "node4");
		                addEdge("anna", "node3", "node5");
		                
		                addGraphs();
						
					}
					
				};
				
				dot.run();
			}
		}
		
	'''

		
}
