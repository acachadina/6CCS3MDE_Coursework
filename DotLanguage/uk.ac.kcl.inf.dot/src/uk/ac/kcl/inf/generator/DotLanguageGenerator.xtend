/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.inf.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uk.ac.kcl.inf.dotLanguage.DotLanguage
import uk.ac.kcl.inf.dotLanguage.Graph
import uk.ac.kcl.inf.dotLanguage.Digraph
import uk.ac.kcl.inf.dotLanguage.NodeDeclaration
import uk.ac.kcl.inf.dotLanguage.UndirectedEdgeDeclaration
import uk.ac.kcl.inf.dotLanguage.UndirectedSubgraphDeclaration
import uk.ac.kcl.inf.dotLanguage.DirectedEdgeDeclaration
import uk.ac.kcl.inf.dotLanguage.DirectedSubgraphDeclaration

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DotLanguageGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.contents.head as DotLanguage
		
		val className = resource.deriveClassName
		fsa.generateFile(className + ".java", model.doGenerateClass(className))
		
				
	}
		
	def deriveClassName(Resource resource) {
		val originalFilename = resource.URI.lastSegment
		
		// string to the first dot
		originalFilename.substring(0, originalFilename.indexOf('.')).toFirstUpper + "Dot"
		
	}
	
	
	def doGenerateClass(DotLanguage program, String className) '''
		
		import dot.library.*;
		
		public class «className» {
			public static void main (String args[]){
				DotFrame tf = new DotFrame();
				
				Dot dot = new Dot(tf){
					@Override
					
					public void run() {
					« program.graphs.map[generateGraphStatements].join("\n")»	
					addGraphs();
					}
					
				};
				
				dot.run();
			}
		}
		
	'''
		
	dispatch def generateGraphStatements(Graph graph) '''
		« graph.statements.map[generateGraphCreationStatements(graph)].join("\n")»
	'''
	
	dispatch def generateGraphStatements(Digraph digraph)'''
		« digraph.statements.map[generateGraphCreationStatements(digraph)].join("\n")»
	'''
	
	// GRAPHS: 
	dispatch def generateGraphCreationStatements(NodeDeclaration node, Graph graph)'''
		addNode("«graph.name»", "«node.nodeName.name»", null, false);
	'''
	dispatch def generateGraphCreationStatements(UndirectedEdgeDeclaration edge, Graph graph)'''
		addEdge("«graph.name»", "«edge.firstNode.name»", "«edge.secondNode.name»"); 
	'''
	dispatch def generateGraphCreationStatements(UndirectedSubgraphDeclaration edge, Graph graph)'''
	'''
	
	//DIGRAPHS
	dispatch def generateGraphCreationStatements(NodeDeclaration node, Digraph digraph)'''
		addNode("«digraph.name»", "«node.nodeName.name»", null, true);
	'''
	
	dispatch def generateGraphCreationStatements(DirectedEdgeDeclaration edge, Digraph digraph)'''
		addEdge("«digraph.name»", "«edge.firstNode.name»", "«edge.secondNode.name»"); 
	'''
	dispatch def generateGraphCreationStatements(DirectedSubgraphDeclaration edge, Digraph digraph)'''
	'''
	

		
}
