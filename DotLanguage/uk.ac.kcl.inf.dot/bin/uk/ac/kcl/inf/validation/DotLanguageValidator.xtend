/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.inf.validation

import org.eclipse.xtext.validation.Check
import uk.ac.kcl.inf.dotLanguage.DotLanguagePackage
import uk.ac.kcl.inf.dotLanguage.Graph
import uk.ac.kcl.inf.dotLanguage.NodeId
import uk.ac.kcl.inf.dotLanguage.NodeDeclaration
import uk.ac.kcl.inf.dotLanguage.UndirectedEdgeDeclaration
import uk.ac.kcl.inf.dotLanguage.impl.UndirectedEdgeDeclarationImpl
import uk.ac.kcl.inf.dotLanguage.impl.GraphImpl
import uk.ac.kcl.inf.dotLanguage.Digraph
import uk.ac.kcl.inf.dotLanguage.impl.DirectedEdgeDeclarationImpl
import uk.ac.kcl.inf.dotLanguage.DirectedEdgeDeclaration

/** 
 * This class contains custom validation rules. 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class DotLanguageValidator extends AbstractDotLanguageValidator { 

	/**
	 * Check whether there is a declared unused node in directed and undirected graphs.
	 */
	 
	public static val DECLARED_UNUSED_GRAPH_NODE = 'uk.ac.kcl.inf.dotLanguage.DECLARED_UNUSED_GRAPH_NODE'
	public static val DECLARED_UNUSED_DIGRAPH_NODE = 'uk.ac.kcl.inf.dotLanguage.DECLARED_UNUSED_DIGRAPH_NODE'
	
	
	@Check
	def declaredUnusedGraphNode(NodeDeclaration nodeDeclaration){
		val graph = nodeDeclaration.eContainer
		val nodeId = nodeDeclaration.nodeName
		
		if (graph.eClass.name == "Graph"){
			if (!(graph as Graph).usedGraphNode(nodeId)){
			warning('This node is declared but not used', nodeDeclaration, 
					DotLanguagePackage.Literals.NODE_DECLARATION__NODE_NAME,
					DECLARED_UNUSED_GRAPH_NODE)
			}
		} else {
			if (!(graph as Digraph).usedDigraphNode(nodeId)){
			warning('This node is declared but not used', nodeDeclaration, 
					DotLanguagePackage.Literals.NODE_DECLARATION__NODE_NAME,
					DECLARED_UNUSED_DIGRAPH_NODE)
			}
		}
	}
	
	/**
	 * Check whether there are several declarations of the same edge.
	 */
	
	@Check
	def multipleEdgeDeclarations(DirectedEdgeDeclaration edgeDeclaration){
		val Graph graph = edgeDeclaration.
	}
	
	
	/**
	 * HELPER FUNCTIONS
	 */
	
	def boolean usedGraphNode(Graph graph, NodeId node){
		var used = false
		val graphStatements = graph.statements
		
		for(var i=0; i < graph.statements.length; i++){
			if(graphStatements.get(i).eClass.name == "UndirectedEdgeDeclaration"){
				val edgeDeclaration = graphStatements.get(i)
				val firstNode = (edgeDeclaration as UndirectedEdgeDeclaration).firstNode
				val secondNode = (edgeDeclaration as UndirectedEdgeDeclaration).secondNode
				if (node == firstNode || node == secondNode){
					used = true
				}
			}
		}
		return used	
	}
	
	def boolean usedDigraphNode(Digraph graph, NodeId node){
		var used = false
		val graphStatements = graph.statements
		
		for(var i=0; i < graph.statements.length; i++){
			if(graphStatements.get(i).eClass.name == "DirectedEdgeDeclaration"){
				val edgeDeclaration = graphStatements.get(i)
				val firstNode = (edgeDeclaration as DirectedEdgeDeclarationImpl).firstNode
				val secondNode = (edgeDeclaration as DirectedEdgeDeclarationImpl).secondNode
				if (node == firstNode || node == secondNode){
					used = true
				}
			}
		}
		return used	
	}
	
	
	
	
}
